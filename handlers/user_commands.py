from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, KeyboardButton, InlineKeyboardButton, ChatJoinRequest, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, Text
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from db.db import Database
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from random import choice
from datetime import datetime, timedelta
import pytz
from aiogram import Bot
from config import config
from aiogram.filters.callback_data import CallbackData
from asyncio import sleep
import apscheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apsched import apsched 
import asyncio
from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from keyboards.kb import admin_kb, cancel_btn, get_user_kb, greet_kb, done_kb, start_kb, about_kb, add_admin_kb, how_kb

router = Router()
bot = Bot(token=config.bot_token.get_secret_value())

'''
class DayCallbackFactory(CallbackData, prefix="fabday"):
    day: str
'''

admins = [5140064907, 725473993, 495291346]

class Form(StatesGroup):
    start_broadcast = State()
    start_broadcast_not_active = State()
    add_admin = State()
    

router.message.filter(F.chat.type == "private")

db = Database('db.db')

scheduler = AsyncIOScheduler(timezone = "Europe/Moscow")

@router.chat_join_request()
async def he(link: ChatJoinRequest):
    await bot.approve_chat_join_request(link.chat.id, link.from_user.id)
    try:
        db.add_user(link.from_user.id, link.from_user.first_name)
    except: pass
    if link.from_user.id in admins:
        db.set_admin(link.from_user.id)
    if datetime.now().hour in [0, 1, 2, 3, 4, 5]:
        hello = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏, '
    elif datetime.now().hour in [6, 7, 8, 9, 10, 11]:
        hello = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, '
    elif datetime.now().hour in [18, 19, 20, 21, 22, 23]:
        hello = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, '
    else:
        hello = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, '
    
    try:
        hello += link.from_user.first_name+'üëã\n\n–Ø –±–æ—Ç HP LIFE!\n–ñ–º–∏—Ç–µ "–ø–æ–µ—Ö–∞–ª–∏", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å –±–æ–ª—å—à–µ –∏ –ø–æ–ª—É—á–∏—Ç—å 500 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π'
    except: pass
    try:
        await bot.send_message(link.from_user.id,
            text=hello, reply_markup=greet_kb())
    except: pass

@router.message(Text('ü§© –ü–æ–µ—Ö–∞–ª–∏'))
async def menu(message: Message):
    try:
        await message.answer(
            text='–ü–æ–µ—Ö–∞–ª–∏!', reply_markup=get_user_kb())
        await message.answer(
            text=f'–ß–µ—Ä–µ–∑ –º–µ–Ω—è –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ü–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ <a href="https://t.me/hplifechat">—á–∞—Ç</a>.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–≤–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å –±–æ–ª—å—à–µ:', reply_markup=start_kb(message.from_user.id), disable_web_page_preview=True, parse_mode="HTML"
            )
    except: pass

@router.message(Command(commands=["start"]))
async def start(message: Message):
    try:
        db.add_user(message.from_user.id, message.from_user.first_name)
    except: pass
    if message.from_user.id in admins:
        db.set_admin(message.from_user.id)
    if datetime.now().hour in [0, 1, 2, 3, 4, 5]:
        hello = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏, '
    elif datetime.now().hour in [6, 7, 8, 9, 10, 11]:
        hello = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, '
    elif datetime.now().hour in [18, 19, 20, 21, 22, 23]:
        hello = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, '
    else:
        hello = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, '
    try:
        hello += message.from_user.first_name
    except: pass
    try:
        await message.answer(
            text=hello, reply_markup=get_user_kb())
        await message.answer(
            text=f'–Ø –±–æ—Ç HP LIFE.\n–ß–µ—Ä–µ–∑ –º–µ–Ω—è –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ü–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ <a href="https://t.me/hplifechat">—á–∞—Ç</a>.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–≤–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.\n\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å –±–æ–ª—å—à–µ:', reply_markup=start_kb(message.from_user.id), disable_web_page_preview=True, parse_mode="HTML"
            )
    except: pass

#Promo
@router.message(Text('üí• –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏'))
async def menu(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã", 
        callback_data="friend"
        )
    try:
        if not db.user_active(message.from_user.id):
            builder.button(
                text="üí∏ –ü–æ–ª—É—á–∏—Ç—å 500 ‚ÇΩ", 
                callback_data="gift"
                )
    except: pass
    builder.adjust(1)
    try:
        await message.answer(
            '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å üòâ', reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except: pass

@router.callback_query(Text('games'))
async def change_contact(callback: CallbackQuery):
    try:
        await callback.message.answer('''–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä!

–ù–∞—Ä–¥—ã
–®–∞—à–∫–∏
–î–∞-–ù–µ—Ç–∫–∏
Alias
UNO
–ú–æ–Ω–æ–ø–æ–ª–∏—è
–ò–º–∞–¥–∂–∏–Ω–∞—Ä–∏—É–º
–ë—É–Ω–∫–µ—Ä
–®–∞—Ö–º–∞—Ç—ã
–ú–∞–Ω—á–∫–∏–Ω
–≠–ø–∏—á–Ω—ã–µ —Å—Ö–≤–∞—Ç–∫–∏ –±–æ–µ–≤—ã—Ö –º–∞–≥–æ–≤: –ö—Ä—É—Ç–∞–≥–∏–¥–æ–Ω 
–ú–µ–º–æ–ª–æ–≥–∏—è

–° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö! –ñ–¥—ë–º –≤ –≥–æ—Å—Ç–∏!''')
    except: pass

#Friend
@router.callback_query(Text('friend'))
async def change_contact(callback: CallbackQuery):
    if db.user_active(callback.from_user.id):
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
            callback_data="howfr"
            )
        try:
            await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ 300 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:", 
                reply_markup=builder.as_markup(resize_keyboard=True))
        except: pass
    else:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üí∏ –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å 500 ‚ÇΩ", 
            callback_data="gift"
            )
        builder.button(
            text="üëå –Ø –æ—Ñ–æ—Ä–º–∏–ª –∫–∞—Ä—Ç—É", 
            callback_data="done"
            )
        builder.adjust(1)
        try:
            await callback.message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ 300 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ —É –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ 500 ‚ÇΩ, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å üòâ", 
                reply_markup=builder.as_markup(resize_keyboard=True))
        except: pass

@router.callback_query(Text('howfr'))
async def gift(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü§ñ Android", 
        callback_data="androidfr"
        )
    builder.button(
        text="üçè iOS", 
        callback_data="iosfr"
        )
    builder.adjust(1)
    try:
        await callback.message.answer('–ö–∞–∫–æ–µ —É –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?', reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except: pass

@router.callback_query(Text('androidfr'))
async def gift(callback: CallbackQuery):
    try:
        await callback.message.answer_photo(FSInputFile('androidfr1.png'),
            caption='1. –û—Ç–∫—Ä—ã–≤–∞–µ–º Wallet Union –∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ. –ó–∞—Ç–µ–º –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É.')
        await callback.message.answer_photo(FSInputFile('androidfr2.png'),
            caption='2. –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –Ω–µ—ë.')
        await callback.message.answer_photo(FSInputFile('andiosfr3.png'),
            caption='4. –ù–∞–∂–∏–º–∞–µ–º ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º¬ª –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É.')
        await callback.message.answer('–ì–æ—Ç–æ–≤–æ!\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—à <a href="https://t.me/hplifechat">—á–∞—Ç</a> –∏–ª–∏ <a href="https://t.me/HookahPlaceLife">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>.\n–ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!', disable_web_page_preview=True, parse_mode="HTML")
    except: pass

@router.callback_query(Text('iosfr'))
async def gift(callback: CallbackQuery):
    try:
        await callback.message.answer_photo(FSInputFile('iosfr1.png'),
            caption='1. –û—Ç–∫—Ä—ã–≤–∞–µ–º Apple Wallet –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –∏ –Ω–∞–∂–∏–º–∞–µ–º ¬´–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã¬ª.')
        await callback.message.answer_photo(FSInputFile('iosfr2.png'),
            caption='2. –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –Ω–µ—ë.')
        await callback.message.answer_photo(FSInputFile('andiosfr3.png'),
            caption='4. –ù–∞–∂–∏–º–∞–µ–º ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º¬ª –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É.')
        await callback.message.answer('–ì–æ—Ç–æ–≤–æ!\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—à <a href="https://t.me/hplifechat">—á–∞—Ç</a> –∏–ª–∏ <a href="https://t.me/HookahPlaceLife">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>.\n–ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!', disable_web_page_preview=True, parse_mode="HTML")
    except: pass

#500 —Ä–µ–±–ª—Å–æ–≤
@router.callback_query(Text('gift'))
async def gift(callback: CallbackQuery):
    try:
        if not db.user_active(callback.from_user.id):
            try:
                db.set_tryed(callback.from_user.id)
            except: pass
            builder = InlineKeyboardBuilder()
            builder.button(
                text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
                callback_data="how"
                )
            builder.button(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ!", 
                callback_data="done"
                )
            builder.adjust(1)
            try:
                await callback.message.answer(
                    '''–ü–∞—Ä–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ:

1. –ü—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ <a href="tg://openmessage?user_id=https://app.loona.ai/3866/create?source=Telegram&tag=link">—Å—Å—ã–ª–∫–µ</a>

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.

2. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ!¬ª, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 300 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π –Ω–∞ –≤–∞—à —Å—á—ë—Ç! ‚Üì''', reply_markup=builder.as_markup(resize_keyboard=True), disable_web_page_preview=True, parse_mode="HTML"
                    )
                await asyncio.sleep(300)
                await callback.message.answer('–ü–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å 500 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π?', reply_markup=done_kb()
                )
            except: pass
        else:
            builder = InlineKeyboardBuilder()
            builder.button(
            text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã", 
            callback_data="friend"
            )
            try:
                await callback.message.answer(
                    '''–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —ç—Ç–æ–π –∞–∫—Ü–∏–µ–π üò¢

–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –ø–æ 300 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:–í—ã–±–µ—Ä–∏ –≤–∫–ª–∞–¥–∫—É ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã¬ª''', reply_markup=builder.as_markup(resize_keyboard=True)
                )
                db.set_active(callback.from_user.id)
            except: pass
    except: pass

#gift done
@router.callback_query(Text('done'))
async def gift(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã", 
        callback_data="friend"
        )
    try:
        await callback.message.answer(
            '''–£—Ä–∞, –Ω–∞ –≤–∞—à–µ–π –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç–µ —É–∂–µ 500 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä—É–±–ª–µ–π!

–ñ–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏! –ò –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö!

–ú—ã –∂–¥–µ–º –≤–∞—Å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –≤ –≥–æ—Å—Ç–∏ –∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –¥—ã–º–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤ –∏ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —á–∞—è!

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –ø–æ 300 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:–í—ã–±–µ—Ä–∏ –≤–∫–ª–∞–¥–∫—É ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã¬ª''', reply_markup=builder.as_markup(resize_keyboard=True)
        )
        db.set_active(callback.from_user.id)
    except: pass


@router.callback_query(Text('idk'))
async def gift(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
        callback_data="how"
        )
    try:
        await callback.message.answer(
            f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—à <a href="https://t.me/hplifechat">—á–∞—Ç</a> –∏–ª–∏ <a href="https://t.me/HookahPlaceLife">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>.\n–ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!', reply_markup=builder.as_markup(resize_keyboard=True), disable_web_page_preview=True, parse_mode="HTML"
        )
    except: pass

@router.callback_query(Text('how'))
async def gift(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="ü§ñ Android", 
        callback_data="android"
        )
    builder.button(
        text="üçè iOS", 
        callback_data="ios"
        )
    builder.adjust(1)
    try:
        await callback.message.answer('–ö–∞–∫–æ–µ —É –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?', reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except: pass

@router.callback_query(Text('android'))
async def gift(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üîó –¢–∞ —Å–∞–º–∞—è —Å—Å—ã–ª–∫–∞", 
        url="https://app.loona.ai/3866/create?source=Telegram&tag=link"
        )
    try:
        await callback.message.answer('1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ.',
            reply_markup=builder.as_markup(resize_keyboard=True))
        await callback.message.answer_photo(FSInputFile('andios2.png'),
            caption='2. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É, –æ—Ç–º–µ—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∏ –Ω–∞–∂–∏–º–∞–µ–º ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª.')
        await callback.message.answer_photo(FSInputFile('android3.png'),
            caption='3. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Wallet Union –Ω–∞–∂–∏–º–∞–µ–º ¬´–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ Google Play —Å –Ω—É–∂–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –µ–≥–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å.')
        await callback.message.answer_photo(FSInputFile('android4.png'),
            caption='4. –î–∞–ª–µ–µ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –≤ Wallet Union¬ª, –∑–∞—Ç–µ–º ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª –∏ –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è. ')
        await callback.message.answer('–ì–æ—Ç–æ–≤–æ!\n\n–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ!¬ª, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 300 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π –Ω–∞ –≤–∞—à —Å—á—ë—Ç! ‚Üì',
            reply_markup=how_kb())
    except: pass

@router.callback_query(Text('ios'))
async def gift(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üîó –¢–∞ —Å–∞–º–∞—è —Å—Å—ã–ª–∫–∞", 
        url="https://app.loona.ai/3866/create?source=Telegram&tag=link"
        )
    try:
        await callback.message.answer('1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ.',
            reply_markup=builder.as_markup(resize_keyboard=True))
        await callback.message.answer_photo(FSInputFile('andios2.png'),
            caption='2. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É, –æ—Ç–º–µ—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∏ –Ω–∞–∂–∏–º–∞–µ–º ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª.')
        await callback.message.answer_photo(FSInputFile('ios3.png'),
            caption='3. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –≤ Apple Wallet¬ª.')
        await callback.message.answer_photo(FSInputFile('ios4.png'),
            caption='4. –ù–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –ø–æ–ø-–∞–ø–µ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ ¬´–†–∞–∑—Ä–µ—à–∏—Ç—å¬ª.\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ Apple Wallet –∏ –Ω–∞–∂–∏–º–∞–µ–º ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª.')
        await callback.message.answer('–ì–æ—Ç–æ–≤–æ!\n\n–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ!¬ª, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 300 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π –Ω–∞ –≤–∞—à —Å—á—ë—Ç! ‚Üì',
            reply_markup=how_kb())
    except: pass

#About
@router.message(Text('‚úçÔ∏è –û –Ω–∞—Å'))
async def menu(message: Message):
    try:
        await message.answer(
            '–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å?', reply_markup=about_kb()
        )
    except: pass

#Maps
@router.callback_query(Text('reviews'))
async def change_contact(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üö© –ú—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", 
        url="https://yandex.ru/maps/org/hookahplace_life/143683058547?si=dv8cwb3uyqueubzqfbuf71a080"
        )
    try:
        await callback.message.answer("–ú—ã –æ–¥–Ω–∏ –∏–∑ –ª—É—á—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞—à –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö.\n\n–ò –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –≥–æ—Å—Ç—å —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–¥—ã—Ö–∞–ª –≤ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!",
            reply_markup=builder.as_markup(resize_keyboard=True))
    except: pass

#Where
@router.callback_query(Text('where'))
async def change_contact(callback: CallbackQuery):
    try:
        await bot.send_chat_action(chat_id=callback.from_user.id, action=ChatAction.UPLOAD_VIDEO)
        await callback.message.answer_video(FSInputFile('where.MP4'), width=720, height=1280, caption='üìç –ù–∞—à –∞–¥—Ä–µ—Å: –ö–∞—à–∏—Ä—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 25, –∫–æ—Ä–ø. 2')
    except: pass

#About text
@router.callback_query(Text('about'))
async def change_contact(callback: CallbackQuery):
    try:
        await callback.message.answer("–ú—ã HookahPlace Life ‚Äî –≤–∞—à–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ –≤ –∫–∞–ª—å—è–Ω–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É.\n\n–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∫–∞–ª—å—è–Ω ‚Äî —ç—Ç–æ –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–º –º—ã –≥–æ—Ç–æ–≤—ã –¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã, –≤—ã—Ö–æ–¥—è—â–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π.\n\n–ü–æ–º–∏–º–æ –∫–∞–ª—å—è–Ω–∞, —É –Ω–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –∫–∏—Ç–∞–π—Å–∫–∏–º —á–∞–µ–º, –∫–∞–∂–¥—ã–π –ø—Ä–æ–ª–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî –º–µ–¥–∏—Ç–∞—Ü–∏—è. –í —á–∞–π–Ω–æ–π —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –≤–∞–∂–Ω–æ –≤—Å—ë: –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ—Å—É–¥—ã –¥–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Å—Ç–∞–∏–≤–∞–Ω–∏—è.\n\n–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—Å! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π!\n\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.")
    except: pass

#SM
@router.callback_query(Text('sm'))
async def change_contact(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üó£Ô∏è VK", 
        url="https://vk.com/hookahplace.life"
        )
    builder.button(
        text="üì∑ INST*", 
        url="https://www.instagram.com/hookahplace.life?igsh=MW1qenJqOWZkdXU5eA=="
        )
    builder.button(
        text="üåç –°–∞–π—Ç", 
        url="https://hplife.ru"
        )
    builder.adjust(1)
    try:
        await callback.message.answer(f'–ú—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:\n\n*–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å Meta (—Å–æ—Ü—Å–µ—Ç–∏ Facebook –∏ Instagram) –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–∏ –∫–∞–∫ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∞—è.', reply_markup=builder.as_markup(resize_keyboard=True))
    except: pass

#admin

async def broadcast_message(users_data: list, text: str = None, photo_id: int = None, document_id: int = None,
                            video_id: int = None, audio_id: int = None, caption: str = None, content_type: str = None, sender_name: str = None):
    good_send = 0
    bad_send = 0
    for user in users_data:
        try:
            chat_id = user[0]
            if content_type == ContentType.TEXT:
                await bot.send_message(chat_id=chat_id, text=text)
            elif content_type == ContentType.PHOTO:
                await bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption)
            elif content_type == ContentType.DOCUMENT:
                await bot.send_document(chat_id=chat_id, document=document_id, caption=caption)
            elif content_type == ContentType.VIDEO:
                await bot.send_video(chat_id=chat_id, video=video_id, caption=caption)
            elif content_type == ContentType.AUDIO:
                await bot.send_audio(chat_id=chat_id, audio=audio_id, caption=caption)
            good_send += 1
        except Exception as e:
            print(e)
            bad_send += 1
        finally:
            await asyncio.sleep(1)
    for user in db.get_admins_id():
        try:
            chat_id = user
            if content_type == ContentType.TEXT:
                await bot.send_message(chat_id=chat_id, text=text+'\n(–Ω–∞–ø–∏—Å–∞–ª(–∞) '+sender_name+')')
            elif content_type == ContentType.PHOTO:
                await bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption)
            elif content_type == ContentType.DOCUMENT:
                await bot.send_document(chat_id=chat_id, document=document_id, caption=caption)
            elif content_type == ContentType.VIDEO:
                await bot.send_video(chat_id=chat_id, video=video_id, caption=caption)
            elif content_type == ContentType.AUDIO:
                await bot.send_audio(chat_id=chat_id, audio=audio_id, caption=caption)
        except Exception as e:
            print(e)
        finally:
            await asyncio.sleep(1)
    return good_send, bad_send


@router.message(Command(commands=["admin"]))
async def cmd_all(message: Message):
    if message.from_user.id in db.get_admins_id():
        try:
            await message.answer(
                '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_kb(message.from_user.id)
            )
        except: pass

@router.callback_query((F.from_user.id in db.get_admins_id()) & (F.data == 'admin_users'))
async def admin_users_handler(callback: CallbackQuery):
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    users = db.get_users()
    text_active = '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—É (–∑–∞ N –¥–Ω–µ–π):\n'
    text_try_active = '‚ùì –ü—ã—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É (N –¥–Ω–µ–π):\n'
    text_ntry_active = '‚ùå –ù–µ –ø—ã—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É:\n'
    for i in users:
        if db.user_tryed(i[0]):
            if db.user_active(i[0]):
                text_active += f'<a href="tg://openmessage?user_id={i[0]}">{i[1]}</a> ('+str(db.get_day(i[0]))+')\n'
            else:
                text_try_active += f'<a href="tg://openmessage?user_id={i[0]}">{i[1]}</a> ('+str(db.get_day(i[0]))+')\n'
        else:
            text_ntry_active += f'<a href="tg://openmessage?user_id={i[0]}">{i[1]}</a>\n'
    text += '\n' + text_active + '\n' + text_try_active + '\n' + text_ntry_active + '\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(len(users))
    try:
        await callback.message.answer(text, reply_markup=admin_kb(callback.from_user.id), disable_web_page_preview=True, parse_mode="HTML")
    except: pass

@router.callback_query((F.from_user.id in db.get_admins_id()) & (F.data == 'admin_broadcast'))
async def admin_broadcast_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –µ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—á—É –∏ –ø–µ—Ä–µ—à–ª—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞',
        reply_markup=cancel_btn()
    )
    await state.set_state(Form.start_broadcast)

@router.message(F.content_type.in_({'text', 'photo', 'document', 'video', 'audio'}), Form.start_broadcast)
async def universe_broadcast(message: Message, state: FSMContext):
    users_data = db.get_users()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    content_type = message.content_type

    if content_type == ContentType.TEXT and message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=get_user_kb())
        return

    await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

    good_send, bad_send = await broadcast_message(
        users_data=users_data,
        text=message.text if content_type == ContentType.TEXT else None,
        photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        caption=message.caption,
        content_type=content_type,
        sender_name=message.from_user.first_name+' –≤—Å–µ–º'
    )

    await state.clear()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ {good_send}, '
                         f'–ù–ï –ø–æ–ª—É—á–∏–ª–æ {bad_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=get_user_kb())

#broad not active
@router.callback_query((F.from_user.id in db.get_admins_id()) & (F.data == 'admin_broadcast_not_active'))
async def admin_broadcast_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –µ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—á—É –∏ –ø–µ—Ä–µ—à–ª—é —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
        reply_markup=cancel_btn()
    )
    await state.set_state(Form.start_broadcast_not_active)

@router.message(F.content_type.in_({'text', 'photo', 'document', 'video', 'audio'}), Form.start_broadcast_not_active)
async def universe_broadcast(message: Message, state: FSMContext):
    users_data = db.get_not_active_users()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    content_type = message.content_type

    if content_type == ContentType.TEXT and message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=get_user_kb())
        return

    await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

    good_send, bad_send = await broadcast_message(
        users_data=users_data,
        text=message.text if content_type == ContentType.TEXT else None,
        photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        caption=message.caption,
        content_type=content_type,
        sender_name=message.from_user.first_name+' –≤—Å–µ–º –Ω–µ–ª–æ—è–ª—å–Ω—ã–º'
    )

    await state.clear()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ {good_send}, '
                         f'–ù–ï –ø–æ–ª—É—á–∏–ª–æ {bad_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=get_user_kb())

#–î–æ–±–∞–≤–∏—Ç—å
@router.callback_query((F.from_user.id in admins) & (F.data == 'add_admin'))
async def admin_broadcast_handler(call: CallbackQuery):
    await call.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—É—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç /start –±–æ—Ç—É –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–≥–æ', reply_markup=add_admin_kb())

@router.message(F.user_shared)
async def handle_user(message: Message):
    try:
        db.set_admin(message.user_shared.user_id)
        await message.answer(f'<a href="tg://openmessage?user_id={message.user_shared.user_id}">–ê–¥–º–∏–Ω</a> –Ω–∞–∑–Ω–∞—á–µ–Ω', reply_markup=get_user_kb(), disable_web_page_preview=True, parse_mode="HTML")
    except:
        await message.answer(f'<a href="tg://openmessage?user_id={message.user_shared.user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—É—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç /start –±–æ—Ç—É', reply_markup=get_user_kb(), disable_web_page_preview=True, parse_mode="HTML")

@router.message(Text('‚ùå –û—Ç–º–µ–Ω–∞'))
async def menu(message: Message):
    try:
        await message.answer(
            '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=get_user_kb()
        )
    except: pass

@router.callback_query((F.from_user.id in admins) & (F.data == 'admin_list'))
async def admin_broadcast_handler(call: CallbackQuery):
    list = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n'
    count = 1
    for i in db.get_admins():
        if i[0] not in admins:
            list += str(count) + f') <a href="tg://openmessage?user_id={i[0]}">{i[1]}</a>\n'
            count += 1
    await call.message.answer(list, disable_web_page_preview=True, parse_mode="HTML")

#–£–¥–∞–ª–∏—Ç—å
class AdminsCallbackFactory(CallbackData, prefix="fabad"):
    id: str

@router.callback_query((F.from_user.id in admins) & (F.data == 'del_admin'))
async def admin_broadcast_handler(call: CallbackQuery):
    list = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n'
    count = 1
    builder = InlineKeyboardBuilder()
    for i in db.get_admins():
        if i[0] not in admins:
            list += str(count) + f') <a href="tg://openmessage?user_id={i[0]}">{i[1]}</a>\n'
            builder.button(text = str(count)+') '+i[1], 
                    callback_data=AdminsCallbackFactory(id = i[0]))
            count += 1
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    builder.adjust(1)
    await call.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤\n'+list, reply_markup=builder.as_markup(resize_keyboard=True), disable_web_page_preview=True, parse_mode="HTML")

@router.callback_query(AdminsCallbackFactory.filter())
async def add_laundry_sentry_fab(callback: CallbackQuery, callback_data: AdminsCallbackFactory):
    await callback.message.delete()
    try:
        db.del_admin(callback_data.id)
        await callback.message.answer(f'<a href="tg://openmessage?user_id={callback_data.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –±–æ–ª—å—à–µ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', disable_web_page_preview=True, parse_mode="HTML")
    except:
        await callback.message.answer(f'<a href="tg://openmessage?user_id={callback_data.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –Ω–µ –æ–±–ª–∞–¥–∞–ª –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', disable_web_page_preview=True, parse_mode="HTML")

@router.callback_query(Text('cancel'))
async def cancel(callback: CallbackQuery):
    await callback.message.answer(
            text='–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await callback.message.delete()

#Unknown
@router.message()
async def error(message: Message):
    try:
        await message.answer(
            "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é"
        )
    except: pass